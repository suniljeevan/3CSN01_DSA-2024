class CQ {
	int f,r,size;
	int cq[];
	int n;
	public CQ() {
		size=5;
		cq=new int[size];
		f=0;r=-1;
		n=0;
	}
	public CQ(int s) {
		size=s;
		cq=new int[size];
		f=0;r=-1;
		n=0;
	}
	public void enqueue(int e) {
		if(isFull()) {
			System.out.println("OVERFLOW");
			return;
			}
		if(f==-1)
			f=r=0;
		else {
			r=(r+1)%size;
		}
		cq[r]=e;
		System.out.println("Inserted");
		n=n+1;
	}
	public int dequeue() {
		if(isEmpty()) {
     System.out.println("UNDERFLOW");
        return -1;
         }
     else {
       int e=cq[f];
			if(f==r)
				f=r=-1;
			else {
			f=(f+1)%size;
			}
			n=n-1;
			return e;
		}
		
	}
	public boolean isFull() {
		if(n>=size)
		return true;
		else return false;
	}
	public boolean isEmpty() {
		if(n==0)
		return true;
		else return false;
	}
	public void traverse() {
		if (n == 0) {
            System.out.println("Empty Queue");
        } else {
            System.out.println("Elements:");
            int i = f;
            int j = 0;
            while (j <= n - 1) {
                System.out.print(cq[i] + " ");
                i = (i + 1) % size;
                j++;
            }
            System.out.println();
        }

	}
	
}
public class CQTest {

	public static void main(String[] args) {
		CQ ob=new CQ(3);
		ob.enqueue(10);
		ob.enqueue(20);
		ob.traverse();
		System.out.println("Deleted Element is "+ob.dequeue());
		ob.traverse();
		ob.enqueue(30);
		ob.traverse();
		System.out.println("Deleted Element is "+ob.dequeue());
		ob.traverse();
	}

}
